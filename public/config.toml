######### 全局录播与上传设置 #########
#------录制与下载------#
### 选择全局默认的下载插件，默认为stream-gears。可选：
### 1.streamlink(streamlink配合ffmpeg混合下载模式，适合用于下载hls_fmp4与hls_ts流，因为streamlink支持多线程拉取）。
### 使用该模式下载flv流时，将会仅使用ffmpeg。请手动安装streamlink以及ffmpeg。
### 2.ffmpeg（纯ffmpeg下载），请手动安装ffmpeg。
### 3.stream-gears
#downloader = "ffmpeg"
### 录像单文件大小限制，单位Byte，超过此大小分段下载
file_size = 2621440000
### 录像单文件时间限制，格式'00:00:00'（时分秒），超过此大小分段下载，如需使用大小分段请注释此字段
#segment_time = "00:50:00"
### 小于此大小的视频文件将会被过滤删除，单位MB
filtering_threshold = 20
### 自定义录播文件名模板, 支持变量 {streamer}:你在配置里设置的直播间名 %Y-%m-%d %H_%M_%S:创建文件的时间, {title}:当场直播间标题
### 如果上传文件，文件名必须包含设定的模板名。其次，如果没有定义时间，文件分片可能会互相覆盖，所以推荐设置时间来避免分段文件名重复。
#filename_prefix = "{streamer}%Y-%m-%d %H_%M_%S{title}"

#------上传------#
### b站提交接口，默认自动选择，可选web，client
#submit_api = "client"
### 选择全局默认上传插件，Noop为不上传，但会执行后处理,可选bili_web，biliup-rs(默认值)
#uploader = "Noop"
### b站上传线路选择，默认为自动模式，目前可手动切换为bda2, kodo, ws, qn, cos, cos-internal(支持腾讯云内网免流+提速，目前已失效)
lines = "AUTO"
### 单文件并发上传数，未达到带宽上限时增大此值可提高上传速度
threads = 3
### 默认情况下，会等待上传录像完成后才开始新的录制。在这段等待上传完成期间，如果同一主播开播了，就会导致直播内容漏录。
### 本功能为测试功能，默认关闭，如开启后遇到bug或问题请提交issues(已知bug 1.丢失直播间名字、开播时间)
### 开启后，即使正在上传文件，当检测到主播开播，就会立即开始新的直播录制并创建新的稿件【默认关闭】
#uploading_record = true

#------杂项------#
### 检测到主播下播后延迟再次检测，单位：秒，避免特殊情况提早启动上传导致漏录
### 当delay不存在时，默认延迟时间为0秒，最长延迟时间为30分钟(1800秒)。若设置的延迟时间超过60秒，则会启用分段检测机制，每隔60秒进行一次开播状态的检测。
delay = 10
### 检测间隔时间，单位：秒
### event_loop_interval的值应 = 最多的相同平台直播间数 * checker_sleep + 5~10秒的余量
### 比如：当有5个哔哩哔哩、3个斗鱼、8个虎牙，event_loop_interval为8 * 15(checker_sleep) + 5~10秒的余量 = 125~130
event_loop_interval = 40
### 相同平台检测间隔，单位：秒。不同平台的链接是并发的，不受此参数影响
checker_sleep = 15
### 线程池1大小，负责download事件
pool1_size = 3
### 线程池2大小，处理除download事件外所有其他事件
pool2_size = 3
### 检测源码文件变化间隔，单位：秒，检测源码到变化后，程序会在空闲时自动重启
check_sourcecode = 15



######### 各平台录播设置 #########
### 使用直播间封面作为投稿封面。此封面优先级低于单个主播指定的自定义封面。（目前仅支持bilibili。直播封面将会保存于cover文件夹下，请自行定期删除）
#use_live_cover = true

#------斗鱼------#
### 如遇到斗鱼录制卡顿可以尝试切换线路。
### tctc-h5（备用线路4）, tct-h5（备用线路5）, ali-h5（备用线路6）, hw-h5（备用线路7）, hs-h5（备用线路13）
#douyucdn = "tct-h5"
### 录制斗鱼弹幕，默认关闭【目前暂时不支持视频按时长分段下的弹幕文件自动分段，只有使用ffmpeg（包括streamlink混合模式）作为下载器才支持】
#douyu_danmaku = false

#------虎牙------#
### 如遇到虎牙录制卡顿可以尝试切换线路。可选以下线路
### AL（阿里云）, HW（华为云）, TX（腾讯云）, WS（网宿）, HS（火山引擎）, AL13（阿里云）, HW16（华为云）
#huyacdn = "AL"
### 录制虎牙弹幕，默认关闭【目前暂时不支持视频按时长分段下的弹幕文件自动分段，只有使用ffmpeg（包括streamlink混合模式）作为下载器才支持】
#huya_danmaku = false

#------抖音------#
### 录制抖音弹幕，默认关闭【目前暂时不支持视频按时长分段下的弹幕文件自动分段，只有使用ffmpeg（包括streamlink混合模式）作为下载器才支持】
#douyin_danmaku = false

#------快手直播（中国大陆）------#
### 如遇到快手录制卡顿可以尝试切换线路。默认随机。可选以下线路
### Tencent(腾讯), Alibaba(阿里), Baidu(百度)
# kwai_cdn = "Tencent"
### 如遇到快手录制卡顿可以尝试切换协议。默认 FLV。可选以下协议
### FLV, HLS
### 使用 HLS 时，推荐指定 format 为 mp4，且 kwai_cdn 选项失效。
# kwai_protocol = "HLS"

#------哔哩哔哩------#
### 录制BILIBILI弹幕，目前暂时不支持视频按时长分段下的弹幕文件自动分段，默认关闭
# bilibili_danmaku = false
### 哔哩哔哩直播流协议.可选 stream（flv流）,hls_ts(ts流）与hls_fmp4（fmp4流），默认为stream
### 仅国内IP可以解析到fmp4流。海外IP只能获取到flv流（ov05与ov07）和ts流（ov105）
### 由于fmp4出现需要一定时间，或者某些小主播（大部分只有原画选项的主播）无fmp4流。
### 目前的策略是，如果开播时间小于60s，将会反复尝试获取fmp4流，如果没获取到就回退到flv流。
### 由于ffmpeg只能单线程下载，并且stream-gears录制有问题，所以目前fmp4流只能使用streamlink+ffmpeg混合模式。
#bili_protocol = "stream"
### 哔哩哔哩直播优选CDN，默认无
#bili_perfCDN = "cn-gotcha208,ov-gotcha05"
### 哔哩哔哩直播强制原画（仅限HLS与FMP4流「beta」的 cn-gotcha01 CDN），默认为关闭
#bili_force_source = false
### 自定义哔哩哔哩直播API，用于获取指定区域（大陆或者海外）的直播流链接，默认使用官方API。
#bili_liveapi = "https://api.live.bilibili.com"
### 自定义fmp4流获取不到时，重新获取一遍flv直播流的api，默认不重新使用其他api重新获取一遍。
### 海外机器玩法：bili_liveapi设置为能获取大陆直播流的API，并将bili_fallback_api设置为官方API，然后优选fmp4流并使用streamlink下载器，最后设置优选cn-gotcha208,ov-gotcha05两个节点。
### 大陆机器玩法：bili_liveapi取消注释保持默认使用官方API，并将bili_fallback_api设置为能获取到海外节点API，然后优选fmp4流并使用streamlink下载器，最后设置优选cn-gotcha208,ov-gotcha05两个节点。
### 这样大主播可以使用cn208的fmp4流稳定录制（海外机如需可以通过自建dns优选指定线路的cn208节点），没有fmp4流的小主播也可以回退到ov05（网宿线路，包括大陆与海外节点）录制flv流。
#bili_fallback_api = 'https://api.live.bilibili.com'
### CDN自动Fallback开关，默认为开启
#bili_cdn_fallback = true
### 强制替换ov-gotcha05的下载地址为指定的自选IP
#bili_force_ov05_ip = "163.171.197.234"
### 强制替换cn-gotcha01（叔叔自建，理论上最稳定）为指定的自选域名组（可多个域名，请用逗号分隔）
### 完整CDN列表请参考 https://rec.danmuji.org/dev/bilibili-cdn/ 中"B站视频云"的部分
### 此功能目前会和stream-gears冲突导致很多分段，请考虑使用ffmpeg录制
### 如果海外机器需要使用此功能，需要在bili_liveapi中指定国内的反代API来获取cn-gotcha01的节点信息。
### 海外机的玩法：配合一个国内的机器（例如便宜的腾讯云，阿里云等等）自建反代api.live.bilibili.com。或者使用https://docs.qq.com/doc/DV2dvbXBrckNscU9x 此处提供的公用反代API
### 如果海外机到联通或者移动网络线路还不错，就可以参考***完整CDN列表***选取一些联通或者移动的节点并填入下面
### 每次会随机返回填入的其中一个线路，并且会自动判断所填入的节点是否可用
#bili_force_cn01 = true
#bili_force_cn01_domains = "cn-jxnc-cm-01-16.bilivideo.com,cn-gddg-cm-01-06.bilivideo.com,cn-fjqz-cm-01-06.bilivideo.com,cn-jssz-cm-01-02.bilivideo.com,cn-gddg-ct-01-12.bilivideo.com"

#------YouTube------#
### 设置偏好的YouTube下载封装格式
### 请务必记得安装ffmpeg
### 支持同时添加多个编码，自动优选指定编码格式里最好的画质/音质版本。
### 视频：其中avc编码最高可以下载到1080p的内容，vp9最高可以下载到4k以及很少部分8k内容，av01画质不是所有视频都有，但是大部分8k视频的8k画质只有av01编码。
### 音频：其中opus编码最高48KHz采样，mp4a（AAC）最高44.1KHz采样，理论上来说opus音质会更好一些。
### 如需指定封装格式，请按以下推荐设置。mp4：avc+mp4a;av01+mp4a. mkv:vp9+mp4a,avc+opus. webm:av01+opus;vp9+opus.
#youtube_prefer_vcodec = "av01|vp9|avc" ### 可用av01,vp9,avc
#youtube_prefer_acodec = "opus|mp4a" ### 可用opus,mp4a
### 设置偏好的YouTube下载最高纵向分辨率
### 最高纵向分辨率，也就是xxxxP.如果youtube_prefer_format指定为mp4，将最高只能下载1080p的视频。
#youtube_max_resolution = "440"
### 限制单个视频的最大大小。
### 注意：此参数优先级高于分辨率设置，并且不包括音频部分的大小，仅仅只是视频部分的大小。
### 如果某个视频实在没有低于此大小的分辨率版本，将会选择最低画质的版本下载。
#youtube_max_videosize = "5G"  ### 参考格式，例如100M，5G，10G。
### YouTube转载视频自动获取视频封面并用于作投稿封面。获取webp封面之后自动转换格式为jpg，并保存在cover/youtube文件夹中，请注意定期清理。
#use_youtube_cover = true
### 仅下载该日期之后的视频
#youtube_after_date = '20220201'
### 仅下载该日期之前的视频（可与上面的youtube_after_date配合使用，构成指定下载范围区间）
#youtube_before_date = '20230501'
### 默认情况下，会先提取完所有页面后才会启动下载视频
### 开启后，将在视频的每个播放列表页面提取后，启动下载【默认关闭】
#youtube_lazy_playlist = true
### YouTube的Streamlink下载器模式，开启之后会调用Streamlink获取直播流并且使用FFMPEG下载，默认关闭【仅当下载器是FFMPEG时才有效】
### 开启之后上面关于YOUTUBE的选项全部无效【我也不知道这个功能有什么屌用】
#use_new_ytb_downloader = false

#------Twitch直播录制------#
### 录制Twitch弹幕，默认关闭【只有下载器为FFMPEG时才有效】
#twitch_danmaku = false
### 去除Twitch广告功能，默认开启【只有下载器为FFMPEG时才有效】
### 这个功能会导致Twitch录播分段，因为遇到广告就自动断开了，这就是去广告。若需要录播完整一整段可以关闭这个，但是关了之后就会有紫色屏幕的CommercialTime
### 还有一个不想视频分段的办法是去花钱开一个Turbo会员，能不看广告，然后下面的user里把twitch的cookie填上，也能不看广告，自然就不会分段了
#twitch_disable_ads = true



######### 录制主播设置 #########
### 最小配置示例
[streamers."星际2Stats拔本神族天梯第一视角"]
url = ["https://www.twitch.tv/kimdaeyeob3"]

### 完整可选配置示例
[streamers."星际2INnoVation吕布卫星人族天梯第一视角"]
url = [
  "https://www.twitch.tv/innovation_s2",
  "https://www.panda.tv/1160340"
]
title = "{title}第一视角%Y-%m-%d{streamer}{url}" ### 自定义标题的时间格式, {title}代表当场直播间标题 {streamer}代表在本config里面设置的主播名称 {url}代表设置的该主播的第一条直播间链接
tid = 171 ### 投稿分区码,171为电子竞技分区
copyright = 2 ### 1为自制
#cover_path = "/cover/up.jpg"
### 支持strftime, {title}, {streamer}, {url}占位符。
description = """
视频简介: {title} %Y-%m-%d %H:%M:%S
{streamer}主播直播间地址：{url}
---
Powered By biliup - Github: https://github.com/ForgQi/biliup"""
### 如需在简介中@别人 请使用以下模版
#credits = [
#  { username = "需要@的用户名", uid = 需要@的uid }
#]
#description = """
#视频简介: {title} %Y-%m-%d %H:%M:%S
#{streamer}主播直播间地址：{url}
#【@credit】
#---
#Powered By biliup - Github: https://github.com/ForgQi/biliup
#"""
dynamic = "#空间动态#"
#dtime = 14_400 ### 设置延时发布时间，距离提交大于2小时，格式为时间戳
#dolby = 0 ### 是否开启杜比音效, 1为开启
#hires = 0 ### 是否开启Hi-Res, 1为开启
#open_elec = 0 ### 是否开启充电面板, 1为开启
#no_reprint = 0 ### 自制声明, 1为未经允许禁止转载
#uploader = "biliup-rs"  ### 覆盖全局默认上传插件，Noop为不上传，但会执行后处理
#filename_prefix = '{streamer}%Y-%m-%d %H_%M_%S{title}'  ### 覆盖全局自定义录播文件命名规则
user_cookie = "cookies.json" ### 使用指定的账号上传
#use_live_cover = true # 获取BILIBILI直播间封面并作为投稿封面。此封面优先级低于单个主播指定的自定义封面。
tags = [ "biliup", "视频标签" ]
#format = "mp4" ### 视频保存格式。如需使用mp4格式，必须切换downloader为ffmpeg或者streamlink。
### 开始下载直播时触发，将按自定义顺序执行自定义操作 注：preprocessor仅支持shell指令
#preprocessor = [
#    {run = "sh ./run.sh"}, ### 执行任意命令，等同于在shell中运行,preprocessor输出的数据为JSON格式，包含主播名字(name)和开播地址(url)信息
#]
### 结束下载直播时触发，将按自定义顺序执行自定义操作 注：downloaded_processor仅支持shell指令
#downloaded_processor[
#    {run = "sh ./run.sh"}, ### 执行任意命令，等同于在shell中运行,downloaded_processor输出的数据为JSON格式，包含主播名字(name)、直播间地址(url)、直播间标题(room_title)以及开播时间(start_time)信息
#]
### 上传完成后触发，将按自定义顺序执行自定义操作 当postprocessor不存在时 默认执行删除文件操作
#postprocessor = [
#    {run = "echo hello!"}, ### 执行任意命令，等同于在shell中运行,视频文件路径作为标准输入传入
#    {mv = "backup/"}, ### 移动文件到backup目录下
#    {run = "python3 path/to/mail.py"}, ### 执行一个 Python 脚本，可以用来发送邮件等。自动发信通知脚本示例 https://biliup.github.io/biliup/Guide.html#%E4%B8%8A%E4%BC%A0%E5%AE%8C%E6%88%90%E5%90%8E%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5
#    {run = "sh ./run.sh"} ### 执行一个shell脚本，用途多样，主要调用系统内的cli工具。自动上传网盘脚本示例 https://gist.github.com/UVJkiNTQ/ae4282e8f9fe4e45b3144b57605b4178
##    'rm',  ### 删除文件，为默认操作
#]
### ffmpeg参数
#opt_args = [ "-ss", "00:00:16" # 跳过开始的16秒 ]



################### 用户cookie ###################
### 在填了cookies的情况下优先使用cookies上传，如需使用用户名密码上传请注释掉cookies
[user]
#------哔哩哔哩------#
#------哔哩哔哩获取直播流用COOKIE------#
### 可参照https://github.com/BililiveRecorder/BililiveRecorder/issues/263.
### 也可使用biliup-rs来获取以下项目.
#bili_cookie = 'SESSDATA=none;bili_jct=none;DedeUserID__ckMd5=none;DedeUserID=none;access_token=none;'
### 重要！！！
### 是否将cookie传入第三方API。将Cookie传入未知的第三方API有几率泄露帐号登录信息。
### 在开启了自定义Cookie（bili_cookie）又同时设置了第三方API（bili_liveapi）的情况下，如果打开了允许第三方API使用Cookie，那么就使用第三方API，如果没有允许（默认），那么设置的第三方API就不生效
#customAPI_use_cookie = false

#------抖音------#
### 如需要录制抖音请在此填入cookie需要__ac_nonce与__ac_signature的值
#douyin_cookie = '__ac_nonce=123456; __ac_signature=123456;'

#------Twitch直播录制------#
### 只在录制twitch直播时才生效
### 如录制Twitch时遇见视频流中广告过多的情况，可尝试在此填入cookie，可以大幅减少视频流中的twitch广告（经测试需要在该Cookie所属账号开了TwitchTurbo会员才有用）
### 该cookie有过期风险，cookie过期后会导致无法获取到直播流（我个人用了四个月都没过期）
### twitch_cookie获取方式：在浏览器中打开Twitch.tv，F12调出控制台，在控制台中执行：document.cookie.split("; ").find(item=>item.startsWith("auth-token="))?.split("=")[1]
### twitch_cookie需要在downloader= "ffmpeg"时候才会生效
#twitch_cookie = 'asdiouo2h987r23hf2893fh923y7'

#------YouTube------#
### 使用Cookies登陆YouTube帐号，可用于下载会限，私享等未登录账号无法访问的内容。请使用 Netscape 格式的 Cookies 文本路径。
### 可以使用Chrome插件Get cookies.txt来生成txt文件。
#youtube_cookie = 'cookiejar.txt'

#------NICO------#
### The email or phone number associated with your Niconico account
### 【翻译：与您的Niconico账户相关的电子邮件或电话号码】
#niconico-email = xxxxxxxxxxx
### The password of your Niconico account
### 【翻译：您的Niconico账户的密码】
#niconico-password = xxxxxxxxxxxx
### Value of the user-session token. Can be used as an alternative to providing a password.
### 【翻译：用户会话令牌的值。可作为提供密码的替代方法。】
#niconico-user-session = xxxxxxxxxxx
### Purge cached Niconico credentials to initiate a new session and reauthenticate.
### 【翻译：清除缓存的 Niconico 凭证，以启动一个新的会话并重新认证。】
#niconico-purge-credentials = xxxxxxxxxxxx



########### 日志输出配置 ###########
[LOGGING.formatters.verbose]
format = "%(asctime)s %(filename)s[line:%(lineno)d](Pid:%(process)d Tname:%(threadName)s) %(levelname)s %(message)s"
datefmt = "%Y-%m-%d %H:%M:%S"

[LOGGING.formatters.simple]
format = "%(filename)s%(lineno)d[%(levelname)s]Tname:%(threadName)s %(message)s"

[LOGGING.handlers.console]
level = "DEBUG"
class = "logging.StreamHandler"
formatter = "simple"
stream = "ext://sys.stdout"

[LOGGING.handlers.file]
level = "DEBUG"
class = "biliup.common.log.SafeRotatingFileHandler"
when = "W0"
interval = 1
backupCount = 1
filename = "ds_update.log"
formatter = "verbose"

[LOGGING.root]
handlers = [ "console" ]
level = "INFO"

[LOGGING.loggers.biliup]
handlers = [ "file" ]
level = "INFO"
